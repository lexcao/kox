


expression  -> literal
             | unary
             | binary
             | grouping;

literal     -> Number | String | "true" | "false" | "nil";
grouping    -> "(" expression ")";
unary       -> ( "-" | "!" ) expression;
binary      -> expression operator expression;
operator    -> "==" | "!=" | "<" | ">" | "<=" | ">="
             | "+"  | "-"  | "*" | "/";

expression  -> assignment ;
assignment  -> ( call "." )? Identifier "=" assignment
             | logic_or ;
logic_or    -> logic_and ( "or" logic_and )* ;
logic_and   -> equality ( "and" equality )* ;
equality    -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison  -> term ( ( ">" | ">=" | "<" | "<=") term )* ;
term        -> factor ( ( "-" | "+" ) factor )* ;
factor      -> unary ( ( "/" | "*" ) unary )* ;
unary       -> ( "-" | "!" ) unary | call ;
call        -> primary ( "(" arguments? ")" | "." Identifier )* ;
primary     -> Number | String | "true" | "false" | "nil"
             | "(" expression ")"
             | This ;
             | super ;
             | Identifier ;
super       -> Super "." Identifier ;

program     -> declaration* EOF ;
declaration -> classDecl
             | funDecl
             | varDecl
             | statement ;
classDecl   -> "class" Identifier ( "<" Identifier )?
               "{" function* "}" ;
funDecl     -> "fun" function
function    -> Identifier "(" parameters? ")" block ;
parameters  -> Identifier ( "," Identifier )* ;
varDecl     -> "var" Identifier ( "=" expression )? ";" ;
statement   -> exprStmt
             | ifStmt
             | returnStmt
             | whileStmt
             | forStmt
             | printStmt
             | block ;
returnStmt  -> "return" expression? ";" ;
whileStmt   -> "while" "(" expression ")" statement ;
forStmt     -> "for" "(" ( varDecl | exprStmt | ";" )
                expression? ";"
                expression? ")" statement ;
ifStmt      -> "if" "(" expression ")" statement
             ( "else" statement )? ;
block       -> "{" declaration* "}" ;
exprStmt    -> expression ";" ;
printStmt   -> "print" expression ";" ;
arguments   -> expression ( "," expression )* ;
